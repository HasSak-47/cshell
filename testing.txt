cargo:rerun-if-changed=hot/api.c
cargo:rerun-if-changed=hot/interface.c
cargo:rerun-if-changed=hot/testing.c
cargo:rerun-if-changed=hot/process.c
cargo:rerun-if-changed=hot/input.c
version: clang version 19.1.7
file: ./hot/api.c
file: ./hot/interface.c
file: ./hot/testing.c
file: ./hot/process.c
new_pipe -> struct Pipe aka struct Pipe therefore lua.UserData("struct Pipe")

close_pipe -> void aka void therefore lua.Nil
p: struct Pipe * therefore lua.UserData("struct Pipe *")

new_command -> struct Command aka struct Command therefore lua.UserData("struct Command")
path: const char * therefore lua.Str

command_reserve_size -> void aka void therefore lua.Nil
cmd: struct Command * therefore lua.UserData("struct Command *")
size: unsigned long therefore lua.UserData("unsigned long")

bind_pipe -> void aka void therefore lua.Nil
cmd: struct Command * therefore lua.UserData("struct Command *")
pipe: struct Pipe * therefore lua.UserData("struct Pipe *")
ty: enum BindType therefore lua.IntEnum

add_arg -> void aka void therefore lua.Nil
cmd: struct Command * therefore lua.UserData("struct Command *")
arg: const char * therefore lua.Str

run -> pid_t aka int therefore lua.Int
p: struct Command * therefore lua.UserData("struct Command *")

new_pipe -> struct Pipe aka struct Pipe therefore lua.UserData("struct Pipe")

close_pipe -> void aka void therefore lua.Nil
p: struct Pipe * therefore lua.UserData("struct Pipe *")

new_command -> struct Command aka struct Command therefore lua.UserData("struct Command")
cmd: const char * therefore lua.Str

bind_pipe -> void aka void therefore lua.Nil
cmd: struct Command * therefore lua.UserData("struct Command *")
pipe: struct Pipe * therefore lua.UserData("struct Pipe *")
type: enum BindType therefore lua.IntEnum

command_reserve_size -> void aka void therefore lua.Nil
cmd: struct Command * therefore lua.UserData("struct Command *")
argc: unsigned long therefore lua.UserData("unsigned long")

add_arg -> void aka void therefore lua.Nil
cmd: struct Command * therefore lua.UserData("struct Command *")
arg: const char * therefore lua.Str

stdout_bind -> _Bool aka _Bool therefore lua.Boolean
cmd: struct Command * therefore lua.UserData("struct Command *")

run -> pid_t aka int therefore lua.Int
p: struct Command * therefore lua.UserData("struct Command *")

file: ./hot/input.c
set_string -> void aka void therefore lua.Nil
in: struct Input * therefore lua.UserData("struct Input *")
str: char * therefore lua.Str

